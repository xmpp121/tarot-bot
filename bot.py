# bot.py
import logging
import os
from dataclasses import dataclass
from typing import Dict, Optional

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Poll
from telegram.ext import (
    Application, CommandHandler, MessageHandler, PollAnswerHandler,
    ContextTypes, filters
)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò (–ó–ê–ü–û–õ–ù–ò–¢–ï) ====
BOT_TOKEN = "8050194596:AAGoCprj1aDw4UwzhBQ2Ma8Uc-O4TBFhQaU"
CHANNEL_CHAT_ID = -1001234567890
CSV_PATH = "contacts.csv"


# ==== –õ–û–ì–ò ====
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("tarobot")

# ==== –í–û–ü–†–û–°–´ (–≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è) ====
QUESTIONS = [
    {
        "q": "–ß—Ç–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
        "options": [
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –¥–∏–∞–ª–æ–≥ üó£Ô∏è",
            "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å üõ°Ô∏è",
            "–°—Ç—Ä–∞—Å—Ç—å –∏ –±–ª–∏–∑–æ—Å—Ç—å ‚ù§Ô∏è",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –±—É–¥—É—â–µ–≥–æ –≤–º–µ—Å—Ç–µ üè°",
        ],
    },
    {
        "q": "–ö–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤—ã –∂–¥—ë—Ç–µ –æ—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ –ª—é–±–≤–∏?",
        "options": [
            "–í–µ—Ä–Ω—ë—Ç—Å—è –ª–∏ –≥–∞—Ä–º–æ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å",
            "–ï—Å—Ç—å –ª–∏ —à–∞–Ω—Å –Ω–∞ –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É",
            "–ö–∞–∫ —Å–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–ª–æ–∫–∏ –≤ –ª—é–±–≤–∏",
        ],
    },
    {
        "q": "–í–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –¢–∞—Ä–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π?",
        "options": [
            "–î–∞, —ç—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä üåô",
            "–°–∫–æ—Ä–µ–µ –¥–∞, —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
            "–ù–µ —É–≤–µ—Ä–µ–Ω(–∞), –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
            "–ù–µ—Ç, –Ω–æ –≥–æ—Ç–æ–≤(–∞) –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
        ],
    },
]

# ==== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====
def contact_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
    )

def start_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton(text="‚ú® –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

# ==== –°–û–°–¢–û–Ø–ù–ò–ï ====
@dataclass
class UserState:
    chat_id: int
    current_idx: int = 0
    last_poll_id: Optional[str] = None

USERS: Dict[int, UserState] = {}  # user_id -> state

# ==== –•–ï–ù–î–õ–ï–†–´ ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    USERS[user.id] = UserState(chat_id=chat_id)
    log.info("/start from user_id=%s chat_id=%s username=@%s",
             user.id, chat_id, user.username)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–ì–æ—Ç–æ–≤(–∞) –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –º–∏–Ω–∏-—Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è? üíû\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=start_keyboard()
    )

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    state = USERS.get(user.id) or UserState(chat_id=chat_id)
    state.current_idx = 0
    state.last_poll_id = None
    USERS[user.id] = state
    log.info("Start quiz for user_id=%s chat_id=%s", user.id, chat_id)
    await send_next_question(user.id, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "‚ú® –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥":
        await quiz(update, context)
    else:
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ ¬´‚ú® –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üôÇ",
            reply_markup=start_keyboard()
        )

async def send_next_question(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    state = USERS.get(user_id)
    if not state:
        log.error("send_next_question: no state for user_id=%s", user_id)
        return

    # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä
    if state.current_idx >= len(QUESTIONS):
        log.info("Quiz finished for user_id=%s", user_id)
        await context.bot.send_message(
            chat_id=state.chat_id,
            text=(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! üôè –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥.\n"
                "–ß—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ –ª–∏—á–Ω–æ –≤–∞–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
            ),
            reply_markup=contact_keyboard(),
        )
        return

    q = QUESTIONS[state.current_idx]
    log.info("Send poll #%s to user_id=%s: %s", state.current_idx + 1, user_id, q["q"])

    # –û–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å (REGULAR): –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
    msg = await context.bot.send_poll(
        chat_id=state.chat_id,
        question=q["q"],
        options=q["options"],
        type=Poll.REGULAR,
        is_anonymous=False,           # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PollAnswer —Å user.id
        allows_multiple_answers=False
    )

    state.last_poll_id = msg.poll.id
    USERS[user_id] = state

async def on_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pa = update.poll_answer
    user_id = pa.user.id
    state = USERS.get(user_id)
    log.info("PollAnswer from user_id=%s poll_id=%s option_ids=%s",
             user_id, pa.poll_id, pa.option_ids)

    if not state:
        log.warning("No state for user_id=%s (PollAnswer). Ignoring.", user_id)
        return
    if not state.last_poll_id or state.last_poll_id != pa.poll_id:
        log.warning("Mismatched poll for user_id=%s (expected %s, got %s)",
                    user_id, state.last_poll_id, pa.poll_id)
        return

    # –ü—Ä–æ—Å—Ç–æ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    state.current_idx += 1
    state.last_poll_id = None
    USERS[user_id] = state

    await context.bot.send_message(chat_id=state.chat_id, text="–ü—Ä–∏–Ω—è—Ç–æ üí´")
    await send_next_question(user_id, context)

def save_contact_to_csv(phone_number: str, first_name: str, last_name: str, user_id: int):
    need_header = not os.path.isfile(CSV_PATH)
    try:
        import csv
        with open(CSV_PATH, "a", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            if need_header:
                w.writerow(["phone_number", "first_name", "last_name", "user_id"])
            w.writerow([phone_number, first_name or "", last_name or "", str(user_id)])
        log.info("Contact saved to %s", CSV_PATH)
    except Exception as e:
        log.exception("Failed to save contact to CSV: %s", e)

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    contact = msg.contact
    phone = contact.phone_number
    first_name = contact.first_name or ""
    last_name = contact.last_name or ""
    user_id = contact.user_id

    log.info("Received contact from user_id=%s phone=%s name=%s %s",
             user_id, phone, first_name, last_name)

    # 1) –°–Ω–∞—á–∞–ª–∞ —Ç–∏—Ö–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–∞–Ω–∞–ª (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞!)
    text = (
        "üì• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (–∫–≤–∏–∑ –¢–∞—Ä–æ)\n"
        f"–ò–º—è: {first_name} {last_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"User ID: {user_id}"
    )
    try:
        await context.bot.send_message(chat_id=CHANNEL_CHAT_ID, text=text)
        log.info("Contact forwarded to channel %s", CHANNEL_CHAT_ID)
    except Exception as e:
        log.exception("Failed to forward contact to channel: %s", e)

    # 2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    try:
        save_contact_to_csv(phone, first_name, last_name, user_id)
    except Exception as e:
        log.exception("CSV save failed: %s", e)

    # 3) –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
        log.info("User contact message deleted")
    except Exception as e:
        # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—ã—á–Ω–æ –º–æ–∂–Ω–æ; –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω ‚úÖ –Ø –≤—ã—à–ª—é –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    except Exception as e:
        log.warning("Failed to send confirmation to user: %s", e)

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

def build_application() -> Application:
    """–°–æ–∑–¥–∞—ë—Ç PTB Application (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –≤–µ–±—Ö—É–∫–æ–≤."""
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("quiz", quiz))  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    app.add_handler(PollAnswerHandler(on_poll_answer))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    return app
